services:
  db:
    container_name: ${POSTGRES_HOSTNAME}
    hostname: ${POSTGRES_HOSTNAME}
    image: "${POSTGRES_IMAGE}"
    env_file:
      - ./env/postgresql.env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    networks:
      animal-lovers:
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 15s

  backend:
    container_name: ${USER_SERVICE_HOST_NAME}
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    image: ${USER_SERVICE_IMAGE}
    env_file:
      - ./env/postgresql.env
    environment:
      CLIENT_HOST_NAME: ${ANIMAL_LOVERS_HOST_NAME}
      CLIENT_PORT: ${ANIMAL_LOVERS_PORT}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    hostname: ${USER_SERVICE_HOST_NAME}
    user: ${USER_SERVICE_HOST_NAME}
    ports:
      - "${USER_SERVICE_EXTERNAL_PORT}:${USER_SERVICE_PORT}"
    cap_drop:
      - ALL
    deploy:
      mode: global
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 170M
    networks:
      animal-lovers:
    depends_on:
      db:
        condition: service_healthy

  frontend:
    container_name: ${ANIMAL_LOVERS_HOST_NAME}
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
      args:
        USER_SERVICE_HOST_NAME: ${USER_SERVICE_HOST_NAME}
        USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    image: ${ANIMAL_LOVERS_IMAGE}
    environment:
      NGINX_HOST: ${ANIMAL_LOVERS_HOST_NAME}
      NGINX_PORT: ${ANIMAL_LOVERS_PORT}
    hostname: ${ANIMAL_LOVERS_HOST_NAME} 
    ports:
      - "0.0.0.0:${ANIMAL_LOVERS_EXTERNAL_PORT}:${ANIMAL_LOVERS_PORT}"
    networks:
      animal-lovers:
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_started

volumes:
  postgres:

networks:
  animal-lovers:
    driver: bridge
